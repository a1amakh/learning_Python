"""
----- 6.1 -----
"""

"""
Создайте две переменные empty и empty_too, сохраните в них значение None
При помощи оператора is выведите на первой строке результат их сравнения на равенство и затем на второй строке результат 
их сравнения на неравенсто
"""
# #Блок решения
# empty = None
# empty_too = None
#
# #Блок вывода
# print(empty is empty_too)
# print(empty is not empty_too)

"""
Создайте список i_love_none из 50 элементов None и распечатайте его
"""
# #Блок решения
# i_love_none = [None for i in range(50)]
#
# #Блок вывода
# print(i_love_none)


"""
----- 6.2 -----
"""

"""
Сохраните в переменной my_tuple кортеж состоящий из 4 любых элементов.
Распечатывать ничего не нужно, просто создайте кортеж
"""
# my_tuple = (1, 2, 3, 4)

"""
Сохраните в переменной lonely кортеж из одного элемента: 777
Распечатайте на экран lonely
"""
# #Блок решения
# lonely = (777,)
#
# #Блок вывода
# print(lonely)

"""
Допишите программу ниже, чтобы она вывела через пробел в одной строке значения самого маленького и самого большого 
элементов кортежа my_tuple.
"""
# my_tuple = (-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781,
#             759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791,
#             631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933,
#             -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278,
#             867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472,
#             -986, -964, -73, 29)
#
# #Блок решения
# #Блок вывода
# print(min(my_tuple), max(my_tuple))

"""
Допишите программу ниже, чтобы она вывела среднего арифметического всех элементов кортежа my_tuple.
"""
# my_tuple = (-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781,
#             759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791,
#             631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933,
#             -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278,
#             867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472,
#             -986, -964, -73, 29)
#
# #Блок решения
# #Блок вывода
# print(sum(my_tuple) / len(my_tuple))

"""
При помощи операций сцепления и дублирования сохраните в переменной result следующий кортеж 
Он состоит из:
    трех единиц
    пяти букв R
    восьми букв A
    пяти цифр 2
Для удобства можете пользоваться переменными a b c d
В качестве ответа выведите содержимое переменной result
"""
# a = (1,)
# b = ('R',)
# c = ('A',)
# d = (2,)
# result = ()
#
# #Блок решений
# result = a * 3 + b * 5 + c * 8 + d * 5
#
# #Блок вывода
# print(result)

"""
Сформировать кортеж, содержащий натуральные числа в интервале [a; b] и вывести его на экран.
Формат ввода:
Вводится два натуральных числа a и b в отдельных строках. Гарантируется, что a<b.
Формат вывода:
Вывести кортеж, содержащий натуральные числа в интервале [a; b]
"""
# result = ()
#
# #Блок ввода
# a = int(input())
# b = int(input())
#
# #Блок решения
# result = tuple(range(a, b + 1))
#
# #Блок вывода
# print(result)

"""
Сформировать кортеж, содержащий нечетные натуральные числа в интервале [n; n^2] и вывести его на экран.
Формат ввода:
Вводится натуральное число n. 
Формат вывода:
Вывести кортеж, содержащий нечетные натуральные числа в интервале  [n; n^2]
"""
# result = []
#
# #Блок ввода
# n = int(input())
#
# #Блок решения
# for i in range(n, n ** 2 + 1):
#     if i % 2 != 0:
#         result.append(i)
#
# result = tuple(result)
#
# #Блок вывода
# print(result)


"""
----- 6.3 -----
"""

"""
Перед вами кортеж my_tuple 
Выведите сперва на отдельной строке элемент, хранящийся под индексом 44, а затем на следующей строке - девятое с конца значение
"""
# my_tuple = (32, 45, 32, 60, 43, 19, 39, 75, 50, 12, 53, 13, 28, 70, 68, 5, 64, 55, 30, 47, 23, 20, 17, 36, 45, 31, 46,
#             50, 33, 45, 9, 41, 12, 57, 40, 43, 47, 51, 56, 54, 40, 30, 37, 23, 43, 66, 64, 27, 44, 75, 51, 2, 19, 72,
#             30, 8, 29, 43, 7, 73, 34, 65, 54, 50, 43, 6, 50, 45, 49, 30, 39, 50, 41, 70, 38, 16, 31, 51, 72, 45, 58,
#             39, 50, 56, 24, 30, 9, 53, 27, 31, 68, 56, 26, 39, 34, 50, 10, 12, 3, 27)
#
# #Блок решения
# #Блок вывода
# print(my_tuple[44])
# print(my_tuple[-9])

"""
Перед вами кортеж my_tuple 
При помощи среза сохраните
    в переменную slice_5_10 значения с 5-го индекса по 10-й включительно
    в переменную slice_from_20 значения с 20-го индекса и по конец кортежа
    в переменную slice_to_35 значения с начала кортежа по 35-й индекс не включительно
Распечатайте данные переменные на отдельных строках в порядке их перечисления
"""
# my_tuple = (32, 45, 32, 60, 43, 19, 39, 75, 50, 12, 53, 13, 28, 70, 68, 5, 64, 55, 30, 47, 23, 20, 17, 36, 45, 31, 46,
#             50, 33, 45, 9, 41, 12, 57, 40, 43, 47, 51, 56, 54, 40, 30, 37, 23, 43, 66, 64, 27, 44, 75, 51, 2, 19, 72,
#             30, 8, 29, 43, 7, 73, 34, 65, 54, 50, 43, 6, 50, 45, 49, 30, 39, 50, 41, 70, 38, 16, 31, 51, 72, 45, 58,
#             39, 50, 56, 24, 30, 9, 53, 27, 31, 68, 56, 26, 39, 34, 50, 10, 12, 3, 27)
#
# #Блок решения
# slice_5_10 = my_tuple[5:11]
# slice_from_20 = my_tuple[20:]
# slice_to_35 = my_tuple[:35]
#
# #Блок вывода
# print(slice_5_10)
# print(slice_from_20)
# print(slice_to_35)

"""
При помощи среза разверните/переверните кортеж my_tuple и распечатайте на экран полученное значение
Развернуть(reverse) кортеж или любую другую упорядоченную коллекцию это значит расположить элементы в обратном порядке 
от последнего до первого
"""
# my_tuple = (32, 45, 32, 60, 43, 19, 39, 75, 50, 12, 53, 13, 28, 70, 68, 5, 64, 55, 30, 47, 23, 20, 17, 36, 45, 31, 46,
#             50, 33, 45, 9, 41, 12, 57, 40, 43, 47, 51, 56, 54, 40, 30, 37, 23, 43, 66, 64, 27, 44, 75, 51, 2, 19, 72,
#             30, 8, 29, 43, 7, 73, 34, 65, 54, 50, 43, 6, 50, 45, 49, 30, 39, 50, 41, 70, 38, 16, 31, 51, 72, 45, 58,
#             39, 50, 56, 24, 30, 9, 53, 27, 31, 68, 56, 26, 39, 34, 50, 10, 12, 3, 27)
#
# #Блок решения
# #Блок вывода
# print(my_tuple[-1::-1])

"""
Посчитайте сколько раз встречается элемент 50 в кортеже my_tuple
"""
# my_tuple = (32, 45, 32, 60, 43, 19, 39, 75, 50, 12, 53, 13, 28, 70, 68, 5, 64, 55, 30, 47, 23, 20, 17, 36, 45, 31, 46,
#             50, 33, 45, 9, 41, 12, 57, 40, 43, 47, 51, 56, 54, 40, 30, 37, 23, 43, 66, 64, 27, 44, 75, 51, 2, 19, 72,
#             30, 8, 29, 43, 7, 73, 34, 65, 54, 50, 43, 6, 50, 45, 49, 30, 39, 50, 41, 70, 38, 16, 31, 51, 72, 45, 58,
#             39, 50, 56, 24, 30, 9, 53, 27, 31, 68, 56, 26, 39, 34, 50, 10, 12, 3, 27)
#
# #Блок решения
# #Блок вывода
# print(my_tuple.count(50))

"""
Перед вами кортеж words_tuple 
При помощи цикла for обойдите слова, хранящиеся в кортеже words_tuple, и для каждого элемента выведите строку вида
Длина слова {word} = {len_word}
Например, для кортежа words_tuple=('hi', 'world') ответ был бы таким:
Длина слова hi = 2
Длина слова world = 5
"""
# words_tuple = ('quaint', 'leftovers', 'thesis', 'density', 'retired', 'weak', 'tolerate',
#                'sensitivity', 'primary', 'definition', 'determine', 'bring', 'monstrous',
#                'hurl', 'timetable', 'month', 'advocate', 'provoke', 'stress', 'omission')
#
# #Блок решения
# #Блок вывода
# for n in words_tuple:
#     print(f'Длина слова {n} = {len(n)}')

"""
Допишите программу ниже, чтобы она вывела среднее арифметическое всех нечетных значений, хранящихся в кортеже my_tuple.
"""
# my_tuple = (-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781,
#             759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791,
#             631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933,
#             -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278,
#             867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472,
#             -986, -964, -73, 29)
# s = []
#
# #Блок решения
# for n in my_tuple:
#     if n % 2 != 0:
#         s.append(n)
#
# #Блок вывода
# print(sum(s) / len(s))


"""
----- 6.4 -----
"""

"""

"""
