"""
----- 4.1 -----
"""

"""
Напишите программу, которая распечатает все натуральные числа от 1000 до 2000 включительно.
Каждое число следует выводить на отдельной строчке как в примере ниже
"""
# n = 1000
# while n <= 2000:
#     print(n)
#     n += 1

"""
Напишите программу, которая распечатает все натуральные числа кратные 5 от 195 до 6785 включительно в порядке убывания.
Каждое число следует выводить на отдельной строчке как в примере ниже
"""
# n = 6785
# while n >= 195:
#     print(n)
#     n -= 5

"""
Мишка и старший брат
Мишка Лимак хочет стать самым большим медведем, ну, или хотя бы стать больше своего старшего брата Боба.
Сейчас вес Лимака равен a, а вес Боба равен b. Гарантируется, что вес Лимака меньше или равен весу Боба.
Лимак ест много, и его вес утраивается каждый год, а вес Боба удваивается каждый год.
Через сколько целых лет Лимак станет строго больше (т. е. будет весить строго больше) Боба?
Входные данные:
В единственной строке находятся два целых числа a и b (1≤a≤b≤10) — веса Лимака и Боба соответственно.
Выходные данные:
Выведите одно целое число — через сколько целых лет Лимак станет строго больше Боба.
"""
# a, b = map(int, input().split())
# count = 0
# while a <= b:
#     a *= 3
#     b *= 2
#     count += 1
# print(count)

"""
Японцы считают цифру «4» очень несчастливой, они даже исключают ее из нумерации этажей
Давайте и мы, от греха подальше, избавимся от этой цифры в списке numbers. Ваша задача удалить все упоминания цифры «4» 
в списке numbers и затем вывести список при помощи команды
"""
# numbers = [2, 3, 7, 9, 5, 0, 6, 3, 6, 0, 1, 7, 9, 4, 4, 4, 2, 2, 6, 9, 1, 7, 0, 3, 8, 1, 0, 3, 8, 0, 8, 4, 0, 2, 3, 6, 6, 1, 5, 8, 7, 2, 3, 8, 7, 7, 1, 2, 2, 8, 4, 3, 4, 8, 0, 7, 9, 8, 3, 7, 7, 7, 7, 5, 1, 7, 4, 5, 0, 8, 0, 9, 2, 4, 7, 6, 6, 5, 9, 7, 1, 7, 8, 8, 3, 4, 9, 7, 6, 4, 2, 0, 0, 0, 9, 4, 0, 9, 4, 4, 4, 5, 5, 4, 2, 5, 9, 4, 8, 1, 5, 7, 1, 0, 2, 6, 8, 7, 2, 7, 9, 3, 6, 4, 7, 5, 0, 7, 2, 0, 8, 2, 9, 8, 6, 4, 4, 7, 5, 5, 9, 4, 9, 5, 6, 9, 1, 1, 3, 1, 5, 2, 1, 7, 0, 0, 7, 8, 1, 3, 0, 0, 4, 4, 3, 3, 6, 7, 8, 6, 1, 2, 0, 2, 0, 9, 9, 0, 5, 2, 4, 1, 7, 4, 9, 9, 4, 9, 6, 9, 2, 7, 1, 2, 4, 5, 4, 0, 9, 0]
# while 4 in numbers:
#     numbers.remove(4)
# print(*numbers)

"""
На вход программе поступает слово. Вам необходимо воспроизвести процесс, в котором каждый раз у этого слово будет пропадать первая и последняя буква. 
Этот процесс необходимо закончить, когда в слове останется только одна буква или слово  станет пустой строкой. При этом результат каждого этапа нужно выводить
"""
# n = input()
# print(n)
# while len(n) > 1:
#     n = n[1:]
#     n = n[:-1]
#     print(n)

"""
Выведите все точные квадраты натуральных чисел, не превосходящие данного числа N.
Задано единственное целое число N
Необходимо вывести  все точные квадраты натуральных чисел, не превосходящие данного числа N.
"""
# n = int(input())
# m = 1
# while m * m <= n:
#     print(m * m)
#     m += 1

"""
В первый день спортсмен пробежал X километров. В каждый последующий день он увеличивал пробег на 15% от предыдущего дня. 
Вам необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров. Само число Y будем поступать на вход программе.
Входные данные:
Программа получает на вход два положительных вещественных числа X и Y (X,Y ≤ 1000).
Выходные данные:
Выведите целое число – номер дня, в который спортсмен пробежал не менее Y километров.
"""
# x, y = map(int, input().split())
# count = 1
# while x <= y:
#     x += x * 0.15
#     count += 1
# print(count)

"""
Вася и носки
У Васи есть n пар носков. Утром каждого дня, собираясь в школу, Вася должен надеть пару носков. Вечером, прийдя со школы, 
Вася снимает надетые носки и выбрасывает их. Каждый m-й день (в дни с номерами m,2m,3m,...) мама покупает Васе одну пару носков. 
Она делает это поздно вечером, поэтому Вася может надеть новые носки не раньше следующего дня. На сколько подряд идущих дней Васе хватит носков?
Входные данные:
В единственной строке записано два целых числа n и m (1≤n≤100; 2≤m≤100), разделенные пробелом.
Выходные данные:
Выведите единственное целое число — ответ на задачу.
"""
# n, m = map(int, input().split())
# count = 0
# temp_1 = m
# temp_2 = 2
# while n > 0:
#     count += 1
#     n -= 1
#     if m == count:
#         n += 1
#         m = temp_1 * temp_2
#         temp_2 += 1
# print(count)

"""
Новогодние свечки
Программист Василий любит романтику — поэтому на этот Новый Год он решил освещать свою комнату свечами.
У Василия есть a свечей. Когда Василий зажигает новую свечу, сначала она горит ровно один час, а затем тухнет. 
Василий — сообразительный малый, поэтому из b потухших свечей он умеет получать одну новую свечу. В последствии эту новую свечу (так же как и другие новые свечи) можно зажечь.
Теперь Василию интересно, на сколько часов освещения хватит его свечек, если он будет действовать оптимальным образом. Помогите ему найти это число.
Входные данные:
В единственной строке заданы два целых числа a и b (1≤a≤1000; 2≤b≤1000).
Выходные данные:
Выведите единственное целое число — количество часов, которое Василий сможет освещать комнату.
"""
# a, b = map(int, input().split())
# count = 0
# temp = 0
# while a > 0:
#     count += 1
#     a -= 1
#     temp += 1
#     if b == temp:
#         temp = 0
#         a += 1
# print(count)

"""
В архитектуре компьютера важную роль играют числа, являющиеся степенями двойки: 1, 2, 4, 8 и так далее. 
Напишите программу, которая проверяет, является ли введённое натуральное число степенью двойки. 
Если да, то выводится сама эта степень; если нет, выводится «НЕТ»
"""
# n = int(input())
# temp = 0
# while 2**temp < n:
#     temp += 1
# if 2**temp == n:
#     print(temp)
# else:
#     print('НЕТ')

"""
Зимний вечер в Бурсе
Возьмём число. Умножим его на его же первую цифру. Результат умножим на первую цифру результата. И так далее. Например, начнём с 8:
8→8∗8=6464→6∗64=384384→3∗384=11521152→1∗1152=11528 \to 8*8=64 \\ 64 \to 6*64=384 \\ 384 \to 3*384 =1152 \\ 1152 \to 1*1152 =11528→8∗8=6464→6∗64=384384→3∗384=11521152→1∗1152=1152
Очевидно, когда первая цифра очередного числа в такой последовательности становится равной 1, числа перестают изменяться. 
Но это происходит не при всех начальных числах.
Напишем программу, которая будет хотя бы приблизительно определять судьбу введённого числа n.
Начиная с числа n, умножайте имеющееся число на его первую цифру, пока у получившегося числа первая цифра не станет равной 1, 
либо пока оно не превысит миллиарда. В качестве ответа выведите результат
"""
# n = int(input())
# if n == 0:
#     print(n)
# else:
#     while int(str(n)[0]) != 1 and n < 1000000000:
#         n *= int(str(n)[0])
#     print(n)


"""
----- 4.2 -----
"""

"""
Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. 
Все, что вводится после 0 не относится к последовательности. Напишите программу, которая выводит сумму всех членов данной последовательности.
"""
# sum = 0
# flag = True
# while flag == True:
#     n = int(input())
#     if n == 0:
#         flag = False
#     sum += n
# print(sum)

"""
На каждой отдельной строчке пользователь вводит друг за другом пароли в виде строки символов. Валидными паролями будем 
считать строки, у которых длина варьируется от 5 до 9 символов включительно. Как только вы встретите первый невалидный пароль, 
ваша программа должна закончить считывать пароли и вывести последний введенный валидный пароль.
Гарантируется, что первый пароль всегда валидный
"""
# flag = True
# while flag == True:
#     n = input()
#     if len(n) < 5 or len(n) > 9:
#         flag = False
#     else:
#         temp = n
# print(temp)

"""
Собираемся в поход
У нас в наличии рюкзак, вместимость которого составляет n литров, и наша задача забить его до предела максимально возможно. 
Нам поступают вещи, объем которых измеряется также в литрах, и мы должны их складывать в наш рюкзак без возможности пропуска. 
Как только суммарный объем новой добавляемой вещи превысит вместимость рюкзака, ваша программа должна вывести слово "Довольно!" 
и затем на отдельных строчках суммарный объем вещей, которые мы смогли упаковать в рюкзак, и их количество
Входные данные:
Число n – вместимость рюкзака. Далее идут произвольное количество строк – объем очередного предмета.
Выходные данные:
Строка "Довольно!" и затем два числа – суммарный объем упакованных товаров и их количество. Каждое значение выводится в отдельной строке.
"""
# n = int(input())
# sum = 0
# count = 0
# flag = True
# while flag:
#     m = int(input())
#     if (sum + m) <= n:
#         sum += m
#         count += 1
#     else:
#         flag = False
# print('Довольно!')
# print(sum)
# print(count)

"""
Новый год и спешка
В последний день уходящего 2016 года Лимак собирается принять участие в соревновании по спортивному программированию. 
Соревнование начнётся в 20:00 и будет продолжаться четыре часа, то есть ровно до полуночи. Участникам будет предложено n задач, 
упорядоченных по возрастанию сложности, то есть задача 1 будет самой лёгкой, а задача номер n — самой сложной. 
Лимак знает, что ему потребуется 5·i минут на решение i-й задачи.
Друзья Лимака планирую устроить роскошную новогоднюю вечеринку и Лимак хочет прибыть в полночь или ранее. 
Он знает, что ему требуется ровно k минут чтобы добрать до места проведения вечеринки от своего дома, где он собирается участвовать в соревновании.
Сколько максимум задач может успеть решить Лимак, так чтобы не опоздать на новогоднюю вечеринку?
Входные данные:
В первой строке входных данных записаны два целых числа n и k (1≤n≤10, 1≤k≤240) — количество задач в соревновании 
и количество минут, за которое Лимак доберётся от дома до места проведения вечеринки.
Выходные данные:
Выведите одно целое число, равное максимальному количеству задач, которое может решить Лимак, так чтобы прибыть 
на новогоднюю вечеринку ровно в полночь или раньше.
Примечание:
В первом примере на соревновании участникам предложено 3 задачи и Лимаку требуется 222 минуты, чтобы доехать до места проведения вечеринки. 
Для решения задач требуется 5, 10 и 15 минут соответственно. Лимак может решить первые две задачи, потравив на это 5+10=15 минут, 
после чего выехать в 20:15 и приехать на вечеринку в 23:57 (через 222 минуты). Таким образом он решит две задачи, 
но на решение третьей времени уже не хватит и ответ равен 2.
Во втором примере Лимак может решить все 4 задачи за 5+10+15+20=50 минут. В 20:50 он сможет выехать из дома и прибыть на вечеринку ровно в полночь.
В третьем примере Лимаку нужна только 1 минута, чтобы оказаться на вечеринке, так что ему хватит времени для решения всех 7 задач.
"""
# n, k = map(int, input().split())
# flag = True
# i = 0
# count = 0
# time = 0
# temp = 0
# while flag:
#     i += 1
#     if i > n:
#         flag = False
#     else:
#         temp += 5
#         time += temp
#         if (k + time) > 240:
#             flag = False
#         else:
#             count += 1
# print(count)

"""
Ваня и кубики
Ване на день рождения подарили n кубиков. Он с друзьями решил построить из них пирамиду. Ваня хочет построить пирамиду 
следующим образом: на верхушке пирамиды должен находиться 1 кубик, на втором уровне — 1+2=3 кубика, 
на третьем — 1+2+3=6 кубиков, и так далее. Таким образом, на i-м уровне пирамиды должно располагаться 1+2+...+(i-1)+i кубиков.
Ваня хочет узнать, пирамиду какой максимальной высоты он может создать с использованием имеющихся кубиков.
Входные данные:
В первой строке записано целое число n (1≤n≤10^4) — количество кубиков, подаренных Ване.
Выходные данные:
Выведите единственной строкой максимально возможную высоту пирамиды.
"""
# cubes = int(input())
# level = 1
# ussed_cubes = 0
# cubes_on_level = 0
# flag = True
# while flag and cubes > 0:
#     cubes_on_level += level
#     if cubes - ussed_cubes < cubes_on_level:
#         flag = False
#     else:
#         ussed_cubes += cubes_on_level
#         level += 1
# print(level - 1)

"""

"""
