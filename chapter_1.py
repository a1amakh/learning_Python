"""
...
"""


"""
----- 1.7 -----
"""

"""
Электронные часы - 1
Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные часы в этот момент.
Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут (от 0 до 59).
Учтите, что число n может быть больше, чем количество минут в сутках.
"""
# n = int(input())
# h = n // 60 - (n // 60 // 24 * 24)
# m = n % 60
# print(h, m)

"""
Следующее четное
Дано целое число n. Выведите следующее за ним четное число.
Задачу необходимо решить целочисленными операциями без использования условных операторов и\или циклов.
"""
# n = int(input())
# temp = n % 2 + (n - 1) % 2 + (n + 1) % 2
# n = n + temp
# print(n)

"""
Электронные часы - 2
Электронные часы показывают время в формате h:mm:ss, то есть сначала записывается количество часов в диапазоне от 0 до 23, 
потом обязательно двузначное количество минут, затем обязательно двузначное количество секунд. Количество минут и секунд 
при необходимости дополняются до двузначного числа нулями.
Программа получает на вход число n - количество секунд, которое прошло с начала суток.
Выведите показания часов, соблюдая формат.
"""
# n = int(input())
# h = n // 3600 - (n // 3600 // 24 * 24)
# m = n % 3600 // 60
# s = n % 3600 % 60
# print(h, ":", m // 10, m % 10, ":", s // 10, s % 10, sep = "")


"""
----- 1.8 -----
"""

"""
Наиболее часто используемая операция в программировании это увеличение переменной на единицу. Она используется 
при организации счетчиков значений. Операцию увеличения на единицу также называют инкремент. Давайте и мы реализуем эту операцию.
Ваша задача увеличить входящее целое значение на единицу используя присвоение с оператором
"""
# n = int(input())
# n += 1
# print(n)

"""
Банк обещает внесенную вами сумму увеличить за год в 1.5 раза. Ваша программа должна посчитать сколько вы получите через год, если внесете x рублей.
Входные данные:
Вещественное число x - количество рублей, которые вносите в банк
Выходные данные:
Итоговая сумма через год
"""
# x = float(input())
# x *= 1.5
# print(x)


"""
----- 1.9 -----
"""

"""
На вход поступает целое число.
Программа должна вывести True, если введенное значение является положительным числом, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(n > 0)

"""
На вход поступает целое число.
Программа должна вывести True, если введенное значение является четным числом, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(n % 2 == 0)

"""
На вход поступает целое число.
Программа должна вывести True, если введенное значение кратно 6 (без остатка делится на 6), в противном случае - False
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(n % 6 == 0)

"""
На вход поступает целое число.
Программа должна вывести True, если введенное значение не делится на 9, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(n % 9 != 0)

"""
На вход поступает целое положительное число.
Программа должна вывести True, если у введенного числа последняя цифра 2, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(n % 10 == 2)

"""
На вход поступают два целых числа.
Программа должна вывести True, если оба числа делятся на 7, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n, p = map(int, input().split())
# print(n % 7 == 0 and p % 7 == 0)

"""
На вход поступают три целых числа - стороны треугольника.
Необходимо вывести True, если данные стороны образуют правильный треугольник, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# a, b, c = map(int, input().split())
# print(a == b == c)

"""
На вход поступает целое число.
Программа должна вывести True, если введенное значение принадлежит интервалу от 5 не включительно до 19 включительно , в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(5 < n <= 19)

"""
На вход поступают два слова.
Программа должна вывести True, если хотя бы одно слово равно слову "awesome".
Сделать задачу необходимо без использования условного оператора.
"""
# n = input()
# p = input()
# print(n == "awesome" or p == "awesome")

"""
На вход поступают два слова.
Программа должна вывести True, если хотя бы одно слово равно слову "awesome".
Сделать задачу необходимо без использования условного оператора.
"""
# a, b, c = map(int, input().split())
# print(a == b or a == c or b == c)

"""
На вход поступает целое положительное число.
Программа должна вывести True, если данное число является двузначным, в противном случае - False.
Сделать задачу необходимо без использования условного оператора.
"""
# n = int(input())
# print(10 <= n <= 99)

"""
На вход поступают три целых числа - стороны треугольника.
Необходимо вывести True, если данные стороны образуют прямоугольный треугольник, в противном случае - False.
Для написания программы необходимо вспомнить теорему Пифагора
Сделать задачу необходимо без использования условного оператора.
"""
# a, b, c = map(int, input().split())
# print(max(a, b, c) ** 2 == a ** 2 + b ** 2 or max(a, b, c) ** 2 == b ** 2 + c ** 2 or max(a, b, c) ** 2 == a ** 2 + c ** 2)


"""
----- 1.10 -----
"""

"""
Перевязь
Портос хочет украсить золотым шитьем свою перевязь. Он знает, что один сантиметр золотого шитья стоит один луидор. 
Портосу надо вышить N миллиметров перевязи. Причем мастер никогда не возьмется за работу, если ему заплатят меньше, чем стоит работа. И сдачу мастер никогда не отдает.
Какое минимальное количество луидоров Портос должен заплатить мастеру за работу?
Входные данные:
Программе на вход поступает натуральное число N (N ≤ 109) – длина перевязи в миллиметрах.
Выходные данные:
Выведите на экран минимальное количество луидоров, которые Портос должен отдать за работу.
"""
# import math
# n = int(input())
# print(math.ceil(n / 10))

"""
После вечеринки компания из N человек хочет добраться домой с помощью такси. Максимальное количество человек, 
которое может уместиться в машину равно 4. Сколько машин придется вызвать ребятам, чтобы все могли уехать?
Программа получает на вход положительное целое число N - количество человек в компании.
"""
# import math
# n = int(input())
# print(math.ceil(n / 4))

"""
Парты 
В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами. 
За каждой партой может сидеть два учащихся. Известно количество учащихся в каждом из трех классов. Выведите наименьшее число парт, которое нужно приобрести для них. 
Программа получает на вход три натуральных числа: количество учащихся в каждом из трех классов (числа не превышают 1000).
"""
# import math
# a = int(input())
# b = int(input())
# c = int(input())
# print(math.ceil(a / 2) + math.ceil(b / 2) + math.ceil(c / 2))

"""
Ремонт
Ваш любимый дядя – директор фирмы, которая делает евроремонты в офисах. В связи с финансово-экономическим кризисом, дядюшка решил оптимизировать свое предприятие.
Давно ходят слухи, что бригадир в дядюшкиной фирме покупает лишнее количество стройматериалов, а остатки использует для отделки своей новой дачи. 
Ваш дядя заинтересовался, сколько в действительности банок краски необходимо для покраски стен в офисе длиной L метров, 
шириной – W и высотой – H, если одной банки хватает на 16м2 , а размерами дверей и окон можно пренебречь? 
Заказов много, поэтому дядя попросил написать программу, которая будет все это считать.
Входные данные:
Программа получает на вход три натуральных числа L, W, H – длину, ширину и высоту офиса в метрах соответственно, каждое из которых не превышает 1000.
Выходные данные:
Выведите на экран одно целое число – минимальное количество банок краски, необходимых для покраски стен в офисе.
"""
# import math
# l, w, h = map(int, input().split())
# s = (l * h + w * h) * 2
# print(math.ceil(s / 16))